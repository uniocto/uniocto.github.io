{"version":3,"sources":["webpack:///./src/pages/tag/index.js","webpack:///./src/pages/tag/tag.module.less"],"names":["Tag","data","rawTags","allMarkdownRemark","edges","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","tag","index","indexOf","sort","tagPage","Config","pages","title","description","path","to","Utils","resolvePageUrl","home","className","style","card","key","cover","fluid","allFile","find","name","childImageSharp","content","capitalize","sTag","length","module","exports"],"mappings":"8PA+GeA,UAnGH,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACPC,EAAUD,EAAKE,kBAAkBC,MACpCC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,QAClCC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,OAAOD,MAChCH,EAAOP,EACVY,QAAO,SAACC,EAAKC,GAAN,OAAgBA,IAAUd,EAAQe,QAAQF,MACjDG,OACGC,EAAUC,IAAOC,MAAMN,IAE7B,OACE,kBAAC,IAAD,CAAQO,MAAM,QACZ,kBAAC,IAAD,CACEA,MAAM,OACNC,YAAY,+BACZC,KAAML,IAER,6BACGV,EAAKJ,KAAI,SAAAU,GAAG,OACX,kBAAC,OAAD,CACEU,GAAIC,IAAMC,eAAeP,IAAOC,MAAMO,MAAMF,IAAMC,eAAeR,EAASJ,GAC1Ec,UAAWC,IAAMC,KACjBC,IAAKjB,GAEL,yBAAKc,UAAWC,IAAMG,OACpB,kBAAC,IAAD,CACEC,MACEjC,EAAKkC,QAAQ/B,MAAMgC,MAAK,SAAA9B,GAAI,OAAIA,EAAKC,KAAK8B,OAAStB,KAAKR,KACrD+B,gBAAgBJ,SAIzB,yBAAKL,UAAWC,IAAMS,SACpB,4BAAKnB,IAAOX,KAAKM,GAAKsB,MAAQX,IAAMc,WAAWzB,IAC/C,2BAAIK,IAAOX,KAAKM,GAAKQ,aACrB,+BACErB,EAAQY,QAAO,SAAA2B,GAAI,OAAIA,IAAS1B,KAAK2B,OADvC,mB,qBC7CdC,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,QAAU","file":"component---src-pages-tag-index-js-f946b1deed9d090e4afa.js","sourcesContent":["/* Vendor imports */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport Image from 'gatsby-image'\n/* App imports */\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport Config from '../../../config'\nimport Utils from '../../utils'\nimport style from './tag.module.less'\n\nconst Tag = ({ data }) => {\n  const rawTags = data.allMarkdownRemark.edges\n    .map(edge => edge.node.frontmatter.tags)\n    .reduce((prev, curr) => prev.concat(curr))\n  const tags = rawTags\n    .filter((tag, index) => index === rawTags.indexOf(tag))\n    .sort() // Remove duplicates and sort values\n  const tagPage = Config.pages.tag\n\n  return (\n    <Layout title=\"Tags\">\n      <SEO\n        title=\"Tags\"\n        description=\"All present tags in the site\"\n        path={tagPage}\n      />\n      <div>\n        {tags.map(tag => (\n          <Link\n            to={Utils.resolvePageUrl(Config.pages.home)+Utils.resolvePageUrl(tagPage, tag)}\n            className={style.card}\n            key={tag}\n          >\n            <div className={style.cover}>\n              <Image\n                fluid={\n                  data.allFile.edges.find(edge => edge.node.name === tag).node\n                    .childImageSharp.fluid\n                }\n              />\n            </div>\n            <div className={style.content}>\n              <h2>{Config.tags[tag].name || Utils.capitalize(tag)}</h2>\n              <p>{Config.tags[tag].description}</p>\n              <label>{`${\n                rawTags.filter(sTag => sTag === tag).length\n              } Posts`}</label>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nTag.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"tag-module--card--36HKi\",\"cover\":\"tag-module--cover--23KCr\",\"content\":\"tag-module--content--3AU-P\"};"],"sourceRoot":""}